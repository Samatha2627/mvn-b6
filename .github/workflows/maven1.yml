

# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Install Kubectl
      run: |
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
         echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
         sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
         chmod +x kubectl
         mkdir -p ~/.local/bin/kubectl
         mv ./kubectl ~/.local/bin/kubectl
         #kubectl version --client      
    - name: Install Kustomize 
      env:
          BIN_DIR: "$(pwd)/bin"
# docs: https://github.com/pkgdeps/verify-checksum-cheatsheet
          KUSTOMIZE_VERSION: 4.1.3
          KUSTOMIZE_ARCHITECTURE: "linux_arm64"
      run: |
           curl -sLO "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_${KUSTOMIZE_ARCHITECTURE}.tar.gz"
           curl -sL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/checksums.txt" -o kustomize.checksums.txt
           # Extract tar.gz to bin/
           mkdir -p "${BIN_DIR}"
           tar zxvf "kustomize_v${KUSTOMIZE_VERSION}_${KUSTOMIZE_ARCHITECTURE}.tar.gz" -C "${BIN_DIR}"
           # Add permission for executable
           chmod +x "${BIN_DIR}/kustomize"
    - name: Helm V3 Installation
      env:
         HELMVERSION: 3.0.2
      run:  |
         curl -sLO https://get.helm.sh/helm-v${HELMVERSION}-linux-amd64.tar.gz 
         tar xvf helm-v${HELMVERSION}-linux-amd64.tar.gz 
         sudo mv linux-amd64/helm /usr/local/bin/
         helm version
 
    - name: KubeVal Installation
      env:  
         KUBEVAL: 0.15.0
      run: |
         echo "downloading kubeval ${KUBEVAL}" 
         curl -sLO https://github.com/instrumenta/kubeval/releases/download/${KUBEVAL}/kubeval-linux-amd64.tar.gz
         tar xzvf kubeval-linux-amd64.tar.gz
         mv kubeval /usr/local/bin/kubeval 
         kubeval --version
    - name: Kubeaudit Installation 
      env:  
          KUBEAUDIT: 0.11.5
      run: |
         echo "downloading kubeaudit ${KUBEAUDIT}" 
         curl -sLO https://github.com/Shopify/kubeaudit/releases/download/v${KUBEAUDIT}/kubeaudit_${KUBEAUDIT}_linux_amd64.tar.gz
         tar xzvf kubeaudit_${KUBEAUDIT}_linux_amd64.tar.gz
         mv kubeaudit /usr/local/bin/kubeaudit 
         kubeaudit --help
    - name: Conftest Installation
      env:  
         CONFTEST: 0.19.0
      run: |
         echo "downloading conftest ${CONFTEST}" 
         curl -sLO https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST}/conftest_${CONFTEST}_Linux_x86_64.tar.gz
         tar xzvf conftest_${CONFTEST}_Linux_x86_64.tar.gz
         mv conftest /usr/local/bin/conftest 
         conftest --version
    - name: Kubeseal Installation
      env:
         KSVERSION: 0.16.0
      run: |
        wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KSVERSION}/kubeseal-linux-amd64 -O kubeseal
        sudo install -m 755 kubeseal /usr/local/bin/kubeseal
        kubeseal --version
        
    - name: yq Installation
      env:
         YQVERSION: 4.16.2
      run: |
        curl -sLO https://github.com/mikefarah/yq/releases/download/v${YQVERSION}/yq_linux_arm64.tar.gz
        tar -xvzf yq_linux_arm64.tar.gz 
        sudo chmod 755 yq_linux_arm64 
        sudo mv yq_linux_arm64 /usr/bin/yq
        
    - name: jq Installation
      run: |
        curl -sLO https://github.com/stedolan/jq/releases/latest/download/jq-linux64
        sudo mv jq-linux64 /usr/local/bin/jq 
        sudo chmod +x /usr/local/bin/jq 
        jq --version
        
    - name: Install Tanzu
      env:
         TANZUVERSION: 0.9.1
      run: |
         curl -H "Accept: application/vnd.github.v3.raw" \ -L https://api.github.com/repos/vmware-tanzu/community-edition/contents/hack/get-tce-release.sh | \bash -s v${TANZUVERSION} linux
         tar -xvf tce-linux-amd64-v${TANZUVERSION}.tar.gz
         cd tce-linux-amd64-v${TANZUVERSION}
         ./install.sh
         tanzu version
         tanzu plugin list
         
    - name: Tanzu login
      run: |
         tanzu management-cluster create --ui
     #tanzu login --endpoint https://MANAGEMENT-CLUSTER-CONTROL-PLANE-ENDPOINT:6443 --name TKG-ENVIRONMENT
    
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: execute py script
      run:  |
        python poc_sonar_api.py
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Sonar Project status
      run: curl -u admin:admin http://34.125.196.119:9000/web_api/api/qualitygates/project_status?projectKey=mvn-b6
    - name: Deploy to GitHub
      run: mvn --batch-mode -DuseGitHubPackages=true deploy
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
    - name: Tomcat deploy
      run: curl -v -u ${{ secrets.TOM_USERNAME }}:${{ secrets.TOM_PASSWD }} -T /home/runner/work/mvn-b6/mvn-b6/target/flipkart1.war 'http://34.125.112.55:8080/manager/text/deploy?path=/Welcome2'
